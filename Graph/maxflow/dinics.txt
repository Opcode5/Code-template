#include <bits/stdc++.h>
#define ll long long
#define pb push_back
#define mp make_pair
#define fast ios_base::sync_with_stdio(false); cin.tie(NULL)
#define filein freopen("input.txt","r",stdin)
#define fileout freopen("output.txt","w",stdout)
using namespace std;
const int mx = 500+5 ;
const int INF = 1000000000 ;
struct edge
{
    int a, b, cap, flow ;
};
int src,snk,level[mx],ptr[mx] ;
vector<edge>e;
vector<int>g[mx];
void add(int a,int b,int cap)
{
    edge e1 = { a, b, cap, 0 } ;
    edge e2 = { b, a, 0 , 0 } ;
    g[a].push_back((int)e.size());
    e.push_back(e1);
    g[b].push_back((int)e.size());
    e.push_back(e2);
}

bool bfs()
{
    int s = src , t = snk ;
    queue < int > q ;
    q.push(s);
    memset(level,-1,sizeof(level));
    level[s]=0 ;
    while (!q.empty())
    {
        int u=q.front() ;
        q.pop() ;
        for(int i=0; i<(int)g[u].size(); i++)
        {
            int id=g[u][i];
            int v=e[id].b;
            if(level[v]==-1&&e[id].flow<e[id].cap)
            {
                q.push(v) ;
                level[v]=level[u]+1 ;
            }
        }
    }
    return level[t]!=-1 ;
}

int dfs(int u,int flow)
{
    if (!flow)  return 0 ;
    if ( u==snk )  return flow ;
    for(; ptr[u]<(int)g[u].size(); ptr[u]++)
    {
        int id = g[ u][ptr[u]];
        int v =  e[id].b ;
        if ( level[v] != level[u]+1 )  continue ;
        int tempflow = dfs (v,min (flow,e[id].cap-e[id].flow)) ;
        if (tempflow)
        {
            e [id].flow+=tempflow ;
            e [id^1].flow-=tempflow ;
            return tempflow ;
        }
    }
    return 0 ;
}

int dinic()
{
    int flow = 0 ;
    while(bfs())
    {
        memset(ptr,0,sizeof(ptr) ) ;
        while ( int tempflow= dfs(src,INF ) )
            flow += tempflow ;
    }
    return flow ;
}
int main()
{
   // complexity O(v*v*e)
    int n,m;
    cin>>n>>m;
    cin>>src>>snk;
    for(int i=0;i<m;i++)
    {
        int a,b,c;
        cin>>a>>b>>c;
        add(a,b,c);
        add(b,a,c);
    }
        cout<<dinic()<<endl;
}
