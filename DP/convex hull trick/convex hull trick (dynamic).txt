#include <bits/stdc++.h>
#define ull unsigned long long
#define ll long long
#define endl '\n'
#define pb push_back
#define mod 1000000007
#define mp make_pair
#define pi acos(-1)
#define line cout<<"----------------------------"<<endl
#define fast ios_base::sync_with_stdio(false); cin.tie(NULL)
#define filein freopen("input.txt","r",stdin)
#define fileout freopen("output.txt","w",stdout)
using namespace std;
const ll mx=200009; 
const ll is_query = -(1LL<<62);
struct Line {
    ll m, c;
    mutable function<const Line*()> succ;
    bool operator<(const Line& rhs) const
    {
        if (rhs.c != is_query) return m < rhs.m;
        const Line* s = succ();
        if (!s) return 0;
        ll x = rhs.m;
        return c - s->c < (s->m - m) * x;
    }
};
struct HullDynamic : public multiset<Line>  // will maintain upper hull for maximum
{
    bool bad(iterator y) 
    {
        auto z = next(y);
        if (y == begin()) 
        {
            if (z == end()) return 0;
            return y->m == z->m && y->c <= z->c;
        }
        auto x = prev(y);
        if (z == end()) return y->m == x->m && y->c <= x->c;
        return 1.0*(x->c - y->c)*(z->m - y->m) >= 1.0*(y->c - z->c)*(y->m - x->m);
    }
    void addline(ll m, ll c) 
    {
        auto y = insert({ m, c });
        y->succ = [=] { return next(y) == end() ? 0 : &*next(y); };
        if (bad(y)) { erase(y); return; }
        while (next(y) != end() && bad(next(y))) erase(next(y));
        while (y != begin() && bad(prev(y))) erase(prev(y));
    }
    ll query(ll x) 
    {
        auto l = *lower_bound((Line) { x, is_query });
        return l.m * x + l.c;
    }
}a;
int main()
{
    
}
