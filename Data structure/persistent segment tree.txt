#include <bits/stdc++.h>
#define endl '\n'
#define ll long long
#define pb push_back
#define mod 1000000007
#define mp make_pair
#define fast ios_base::sync_with_stdio(false); cin.tie(0);cout.tie(0);
#define filein freopen("input.txt","r",stdin)
#define fileout freopen("output.txt","w",stdout)
using namespace std;
const ll  mx=100009;
int ara[mx];
int cnt=1;
struct node
{
    int l,r,val;
}tr[4*mx+mx*20];
void init(int node, int b, int e)
{
    if(b==e)
    {
        tr[node].val=0; 
        return ;
    }
    int mid=(b+e)>>1;
    tr[node].l=cnt++;
    tr[node].r=cnt++;
    init(tr[node].l,b,mid);
    init(tr[node].r,mid+1,e);
    tr[node].val=tr[tr[node].l].val+tr[tr[node].r].val;
}
int update(int pre, int b, int e, int i, int j,int val)
{
    if(b>j or e<i) return  pre;
    int curr=cnt++;
    if(b>=i and e<=j)
    {
        tr[curr].val=tr[pre].val+val;
        return curr;
    }
    int mid=(b+e)>>1;
    tr[curr].l=update(tr[pre].l,b,mid,i,j,val);
    tr[curr].r=update(tr[pre].r,mid+1,e,i,j,val);
    tr[curr].val=tr[tr[curr].l].val+tr[tr[curr].r].val;
    return curr;
}
int query(int pre, int cur, int b, int e, int i, int j)
{
   if(b>j or e<i) return 0; 
   if(b>=i and e<=j) return tr[cur].val-tr[pre].val; 
   int mid=(b+e)>>1; 
   int x=query(tr[pre].l,tr[cur].l,b,mid,i,j);
   int y=query(tr[pre].r,tr[cur].r,mid+1,e,i,j);
   return x+y; 
}
int root[mx];
int main()
{
    //spoj kquery
    int n;
    cin>>n;
    root[0]=0;
    init(root[0],0,n);
    vector<int> v;
    for(int i=0;i<n;i++) 
    {
       cin>>ara[i];
       v.pb(ara[i]);
    }
    sort(v.begin(),v.end());
    for(int i=0;i<n;i++) ara[i]=lower_bound(v.begin(),v.end(),ara[i])-v.begin();
    for(int i=1;i<=n;i++)
    {
       root[i]=update(root[i-1],0,n,ara[i-1],ara[i-1],1);
    }
    int q; cin>>q; 
    while(q--)
    {
       int l,r,k; 
       cin>>l>>r>>k; 
       k=upper_bound(v.begin(),v.end(),k)-v.begin();
       cout<<query(root[l-1],root[r],0,n,k,n)<<endl; 
    }
   
}
