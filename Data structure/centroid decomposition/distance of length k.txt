#include<bits/stdc++.h>
#define ull unsigned long long
#define ll long long
#define pb push_back
#define endl '\n'
#define mod 1000000007
#define mod1 1000000009
#define line cout<<"----------------------"<<endl
#define mp make_pair
#define fast ios_base::sync_with_stdio(false); cin.tie(0); cout.tie(0);
#define filein freopen("input.txt","r",stdin)
#define fileout freopen("output.txt","w",stdout)
using namespace std;
const ll   mx=500009;
vector<ll > v[mx];
ll  sub[mx];
ll  visit[mx];
ll  k;
ll  ans;
ll  cnt[mx];
void dfs(ll  s, ll  par)
{
    sub[s]=1;
    for(auto x: v[s])
    {
        if(x==par or visit[x]) continue;
        dfs(x,s);
        sub[s]+=sub[x];
    }
}
ll  centroid(ll  s,ll  par, ll  tot)
{
    for(auto x: v[s])
    {
        if(visit[x] or x==par) continue;
        if(sub[x]*2>tot) return centroid(x,s,tot);
    }
    return s;
}
void dfs1(ll  s, ll  par,ll  lv,ll  c)
{
    cnt[lv]+=c ;
    for(auto x: v[s])
    {
        if(visit[x] or x==par ) continue;
        dfs1(x,s,lv+1,c);
    }
}
void path(ll  s, ll  par, ll  lv)
{
    if(lv<=k) ans+=cnt[k-lv];
    for(auto x: v[s])
    {
        if(visit[x] or par==x) continue;
        path(x,s,lv+1);
    }
}
void solve(ll  s)
{
    cnt[0]=2;
    for(auto x: v[s])
    {
        if(visit[x]) continue;
        dfs1(x,s,1,1);
    }
    for(auto x: v[s])
    {
        if(visit[x]) continue;
        dfs1(x,s,1,-1);
        path(x,s,1);
        dfs1(x,s,1,1);
    }
    for(auto x: v[s])
    {
        if(visit[x]) continue;
        dfs1(x,s,1,-1);
    }
}
void build(ll  s) ///O(nlogn)
{
    dfs(s,-1);
    ll  d=centroid(s,-1,sub[s]);
    solve(d);
    visit[d]=true;
    for(auto x: v[d])
    {
        if(visit[x]) continue;
        build(x);
    }
}
int  main()
{
    fast;
    ll  n;
    cin>>n>>k;
    for(ll  i=0;i<n-1;i++)
    {
        ll  a,b;
        cin>>a>>b;
        v[a].pb(b);
        v[b].pb(a);
    }
    build(1);
    cout<<ans/2<<endl;
}